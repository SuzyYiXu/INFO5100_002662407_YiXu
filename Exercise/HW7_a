// (a) Generic method to count elements with a specific property
import java.util.Collection;
import java.util.List;
import java.util.function.Predicate;

public class generic_count {
    // Generic method to count elements that match a given predicate
    public static <T> int countElements(Collection<T> collection, Predicate<T> predicate) {
        int count = 0;
        for (T element : collection) {
            if (predicate.test(element)) {
                count++;
            }
        }
        return count;
    }

    // Example usage
    public static void main(String[] args) {
        Collection<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
        
        // Count odd numbers
        int oddCount = countElements(numbers, n -> n % 2 != 0);
        System.out.println("Number of odd integers: " + oddCount);
        
        // Count primes (using a simple prime checker)
        int primeCount = countElements(numbers, generic_count::isPrime);
        System.out.println("Number of primes: " + primeCount);
    }
    
    // Helper method to check if a number is prime
    private static boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
}
